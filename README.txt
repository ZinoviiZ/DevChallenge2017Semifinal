BUILD APPLICATION

docker run --name [mongo-container] -d mongo
docker build -t [image-name] .
docker run -it --name [container-name] -p 8080:8080 --link [mongo-container]:mongo -e random=[RANDOM_MODE] -e pages=[PAGES_NUMBER] [image-name]


[RANDOM_MODE]= (true - включити рандом мод, false - звичайний мод) (про нього далі)
[PAGES_NUMBER]= (<=0 - скрапити всі сторінки, n - скрапити n сторінок) 

Методологія
Restfull API із використанням hateoas. Чому? Легко маштабоване апі, та для отримання інформації потрібна тільки одна точка входу.
Також використовую AOP для легкомаштабованого керування помилковими ситуаціями.

Всю роботу скрапінга, та моніторинга розпаралелив, щоб отримати максимально швидкий результат роботи серверу. Відразу після старту додатку можна тестити апі - документи будуть добавлятись в рантаймі. Всі документи (наразі близько 8832) сервер скрапить і зберігає за ~ 1 хв 30 с. 
БД обрав MongoDB. Досить швидка, гнучка в налаштуваннях, та добре підходить для збереження інформації у вигляду документів.
Вирішив скрапити сайт із умови: http://brovary-rada.gov.ua/documents/
При запуску додатку всі потоки ініціалізує клас ThreadExecutor який створює ScheduledExecutorService - для запуска потоків по графіку. 


RANDOM MODE:
Для кращого та легшого тестування додатку добавив random_mode - для створення випадку змінених документів. Із цим модом при скрапінгу документів, кожний десятий вважається новою версією документа - встановлюється існуючий id;

Додаток скрапить весь контент тега <div class="row otstupVertVneshn"> - в ньому зберігається вся важлива інформація сторінки. Приклад цього інформації цього тега показаний в картинці {root}/example.png

При скрапінгу документів зберігається їхній оригінальний текст (версія 0). При знаходжені змінених документів, зберігаються тільки символьні зміни в класі Page.PageDiff в полі diff. В подальшому для роботи із змінами текста я користуюсь бібліотекою від google - DiffMatchPatch яка досить швидко відсідковує зміни в тексті, та надає компактний формат різниці текстів. Приклад різниці контенту лежить в файлі {root}/example.html

Вся інформація щодо API за посиланням 
http://localhost:8080/swagger-ui.html - тут же можна їх і протестити.
Uml діаграма лежить в {root}/diagram.png
Вся інформація щодо класів лежить в {root}/JavaDoc

Для гнучкості при тестуванні використувається інші налаштування середовища. В даному випадку використовуєтсь БД яка лежить на heroku, але при необхідності там можуть бути додаткові специфічні налаштування.

Вибачаюсь, що запуск йде не одною командою docker-compose up.