SCALLABE
Оскільки я використовую RESTfull архітектуру, додаток легкий в маштабуванні, для отримання інформації потрібна тільки одна точка входу.
Кожий клас відповідає свої спеціалізації (принцип SOLID). 
При маштабуванні логіки потрібно додати:
-specific controller;
-specific responses extend ApiResponse - для використання в дженерік MessageResponse классі.
-specific service;
-specific service helper - щоб полегшити бізнес логіку в сервісу;
-request/response білдери;
-specific exception extends DevChallengeSemifinalException;
-add specific exception handling method to ControllerExceptionHandler;
-add specifc error codes to ErrorCode - в додатку гнучка архітектура помилок та їх керування.
-add unit and integration tests
Гнучка архітектура відповідей через дженерік клас - MessageResponse дає уніфіцируваний тип відповідей - що теж відносить до Rest
Оскільки я старався майже все розпаралелити - додаток маштабується кількостю ядер системи. Зараз на MacBook 2014 всі документи сайту http://brovary-rada.gov.ua/documents/ сервер скрапить і зберігає за ~ 1 хв 30 с. На цей час також вплинуло режим SAFE в MongoDB (setting in MongoConfig.class) який сповільнює роботу, але робить запити threadsafe.

Підсумки:
Плюси:
Маштабована архітектура.
Просте задокументоване API - /swagger-ui.html
Задокументовані класи в папці {root}/JavaDoc
Використовуючи HATEOAS методологію - клієнтам потрібна тільки одна точка входу - маштабування:)
Розподілені операції які дають збільшення працездатності при збільшені ядер системи.
AOP підхід, який дає легке добавлення валідації/керування помилками, не навантажуючи основний функціонал системи.
Розділений enviroment properties для тестування та продакшн:)
Легко запускаючий додаток написаний з-за допомогою Spring Boot framework. Додаток запускається командою java -jar {jarfile}

Із мінусів:
Відсутність кешування, але в конкретному завданні це не дуже добавило б працездатності системи.

